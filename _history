{"entries":[{"timestamp":1757383274232,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":230,"diffs":[[1," "]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":236,"length1":45,"diffs":[[1,"    \"languageRestriction\": \"javascript-only\",\n    \"additionalFilePaths\": []\n"]]}]}]},{"timestamp":1757383895540,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":46,"length1":6,"diffs":[[1,"   if(pause) {\r\n       return true\r\n   } else if(!pause) {\r\n       return false\r\n   } else {\r\n       return false\r\n   }\r\n"]]}]}]},{"timestamp":1757383896600,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":491,"diffs":[[1,"function pauseUntil2(pause: () => boolean) {\r\n   w\r\n"]]},{"start1":57,"length1":289,"diffs":[[1,""]]},{"start1":59,"length1":230,"diffs":[[1,""]]},{"start1":104,"length1":17,"diffs":[[1,"game.over()"]]}]}]},{"timestamp":1757384490653,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":496,"length1":734,"diffs":[[1,"function __queuePollEvent(timeOut: number, condition: () => boolean, handler: () => void) {\r\n"]]},{"start1":782,"length1":397,"diffs":[[1,""]]},{"start1":1017,"length1":66,"diffs":[[1,"pauseUntil2(() => controller.A.isPressed())\r\ngame.over()\r\n"]]}]}]},{"timestamp":1757385198949,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":2,"length1":50,"diffs":[[1,"    \"name\": \"updated pause until function\",\n"]]}]}]},{"timestamp":1757385216344,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":2053,"length1":96,"diffs":[[1,""]]},{"start1":2055,"length1":0,"diffs":[[1,"pauseUntil2(() => controller.B.isPressed())\r\ngame.gameOver(true)\r\n"]]},{"start1":2123,"length1":0,"diffs":[[1,"\r\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":2,"length1":54,"diffs":[[1,"    \"name\": \"pause until function fully impleme\",\n"]]},{"start1":210,"length1":44,"diffs":[[1,""]]}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"},{"type":"added","filename":"main.blocks","value":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <variables></variables>\n  <block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block>\n</xml>"}]}],"snapshots":[{"timestamp":1757383274231,"editorVersion":"2.0.56","text":{"main.ts":" ","README.md":" ","assets.json":"","pxt.json":"{\n    \"name\": \"updated pause until function\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\",\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1757385198949,"editorVersion":"2.0.56","text":{"main.ts":"class PollEvent {\r\n    public eid: number;\r\n    public vid: number;\r\n    public start: number;\r\n    public timeOut: number;\r\n    public condition: () => boolean;\r\n    public once: boolean;\r\n    constructor(eid: number, vid: number, start: number, timeOut: number, condition: () => boolean, once: boolean) {\r\n        this.eid = eid;\r\n        this.vid = vid;\r\n        this.start = start;\r\n        this.timeOut = timeOut;\r\n        this.condition = condition;\r\n        this.once = once;\r\n    }\r\n}\r\n\r\nlet _pollEventQueue: PollEvent[] = undefined;\r\n\r\nfunction pollEvents() {\r\n    while (_pollEventQueue.length > 0) {\r\n        const now = control.millis();\r\n        for (let i = 0; i < _pollEventQueue.length; ++i) {\r\n            const ev = _pollEventQueue[i];\r\n            if (ev.condition() || (ev.timeOut > 0 && now - ev.start > ev.timeOut)) {\r\n                control.raiseEvent(ev.eid, ev.vid);\r\n                if (ev.once) {\r\n                    _pollEventQueue.splice(i, 1);\r\n                    --i;\r\n                }\r\n            }\r\n        }\r\n        pause(50);\r\n    }\r\n    // release fiber\r\n    _pollEventQueue = undefined;\r\n}\r\n\r\n function __queuePollEvent(timeOut: number, condition: () => boolean, handler: () => void) {\r\n    const ev = new PollEvent(\r\n        DAL.DEVICE_ID_NOTIFY,\r\n        control.allocateNotifyEvent(),\r\n        control.millis(),\r\n        timeOut,\r\n        condition,\r\n        !handler\r\n    );\r\n\r\n    // start polling fiber if needed\r\n    if (!_pollEventQueue) {\r\n        _pollEventQueue = [ev];\r\n        control.runInParallel(pollEvents);\r\n    }\r\n    else {\r\n        // add to the queue\r\n        _pollEventQueue.push(ev)\r\n    }\r\n\r\n    // register event\r\n    if (handler)\r\n        control.onEvent(ev.eid, ev.vid, handler);\r\n    else // or wait\r\n        control.waitForEvent(ev.eid, ev.vid);\r\n}\r\n\r\n\r\nfunction pauseUntil2(condition: () => boolean, timeOut?: number): void {\r\n    if (!condition || condition()) return; // optimistic path\r\n    if (!timeOut) timeOut = 0;\r\n    __queuePollEvent(timeOut, condition, undefined);\r\n}\r\n\r\npauseUntil2(() => controller.B.isPressed())\r\ngame.gameOver(true)\r\n\r\n\r\n","README.md":" ","assets.json":"","pxt.json":"{\n    \"name\": \"updated pause until function\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\"\n}\n"}}],"shares":[],"lastSaveTime":1757385243314}